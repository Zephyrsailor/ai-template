---
description: 
globs: 
alwaysApply: true
---
---
description: FastAPI Rules for LLM Applications
globs: ["backend/**/*.py"]
alwaysApply: false
---

### 关键原则
- 编写简洁、技术性的响应，提供准确的 Python 示例。
- 使用函数式、声明式编程；尽可能避免使用类。
- 优先迭代和模块化，减少代码重复。
- 使用描述性变量名，带辅助动词（如 `is_active`、`has_permission`）。
- 目录和文件使用小写下划线命名（如 `routers/user_routes.py`）。
- 优先为路由和实用函数使用命名导出。
- 使用 RORO 模式（接收对象，返回对象）。

### Python/FastAPI
- 使用 `def` 定义纯函数，使用 `async def` 定义异步操作。
- 为所有函数签名使用类型提示。
- 优先使用 Pydantic 模型而非原始字典进行输入验证。
- 文件结构：导出路由、子路由、实用工具、静态内容、类型（模型、模式）。
- 避免条件语句中使用不必要的花括号。
- 使用单行语法处理简单条件（如 `if condition: do_something()`）。

### 错误处理
- 在函数开始处理错误和边缘情况。
- 使用早期返回处理错误条件，避免嵌套 if 语句。
- 将成功路径放在最后以提高可读性。
- 避免不必要的 else 语句；使用 if-return 模式。
- 使用保护子句处理前提条件和无效状态。
- 实现适当的错误日志记录和用户友好的错误消息。
- 使用自定义错误类型或错误工厂确保一致性。

### 依赖项
- FastAPI
- Pydantic v2
- 异步数据库库（如 `asyncpg`、`aiomysql`）
- SQLAlchemy 2.0（如果使用 ORM 功能）

### FastAPI 特定规则
- 使用函数组件和 Pydantic 模型进行输入验证/响应模式。
- 使用声明式路由定义，明确返回类型注释。
- 使用 `def` 处理同步操作，使用 `async def` 处理异步操作。
- 最小化 `@app.on_event("startup")` 和 `@app.on_event("shutdown")`；优先使用生命周期上下文管理器。
- 使用中间件进行日志记录、错误监控、性能优化。
- 使用异步函数优化 I/O 密集型任务，如缓存、延迟加载。
- 使用 `HTTPException` 处理预期错误，建模为特定 HTTP 响应。
- 使用中间件处理意外错误，日志记录和错误监控。
- 使用 Pydantic 的 `BaseModel` 确保一致的 I/O 验证和响应模式。

### 性能优化
- 最小化阻塞 I/O；使用异步操作处理数据库调用、外部 API 请求。
- 为静态/频繁访问数据实现缓存（如 Redis、内存存储）。
- 使用 Pydantic 优化数据序列化/反序列化。
- 使用延迟加载处理大型数据集和大量 API 响应。

### 关键惯例
- 依赖 FastAPI 的依赖注入系统管理状态/共享资源。
- 优先考虑 API 性能指标（响应时间、延迟、吞吐量）。
- 限制路由中的阻塞操作；优先异步、非阻塞流。
- 使用专用异步函数处理数据库/外部 API 操作。
- 结构化路由/依赖以优化可读性和可维护性。

### LLM 特定考虑
- 安全存储 API 密钥（如使用环境变量或秘密管理器）。
- 优化 LLM 请求，必要时批量处理或流式传输。
- 监控并限制令牌使用，避免超出 API 限制。
- 为 LLM API 调用实现速率限制，防止滥用。