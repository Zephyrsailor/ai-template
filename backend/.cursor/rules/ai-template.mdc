---
description: 
globs: 
alwaysApply: false
---
# AI Template 项目编码规范

## 核心架构设计思想

### 1. LLM Agent 设计模式
- **ReAct模式**: 采用Reasoning + Acting循环，支持思考-行动-观察的智能体模式
- **工具调用**: 通过MCP协议集成外部工具，实现Agent能力扩展
- **流式响应**: 所有LLM交互采用流式处理，提供实时反馈
- **多轮对话**: 支持上下文保持的多轮对话，自动管理会话历史

### 2. MCP (Model Context Protocol) 设计思想
- **标准化工具接口**: 通过MCP协议统一工具调用标准
- **用户隔离**: 每个用户拥有独立的MCP服务器实例，确保数据安全
- **动态工具发现**: 支持运行时动态加载和发现工具
- **异步执行**: 所有工具调用采用异步模式，避免阻塞

### 3. 知识库增强检索 (RAG)
- **多知识库支持**: 支持同时查询多个知识库
- **向量化存储**: 使用向量数据库进行语义检索
- **上下文融合**: 将检索结果智能融合到对话上下文中
- **权限控制**: 基于用户权限控制知识库访问

### 4. 多Provider架构
- **Provider抽象**: 统一的LLM Provider接口，支持多种LLM服务
- **用户配置**: 每个用户可配置自己的LLM Provider和模型
- **动态切换**: 支持对话中动态切换模型
- **配置管理**: 安全的API密钥管理和配置存储

## 代码规范

### 1. 日志规范
```python
from ..core.logging import get_logger
logger = get_logger(__name__)

# 使用项目统一的日志系统，而非标准logging
logger.info("信息日志")
logger.error("错误日志", exc_info=True)  # 包含异常堆栈
logger.warning("警告日志")
```

### 2. 异常处理规范
```python
# 早期返回模式
def process_data(data):
    if not data:
        logger.warning("数据为空")
        return None
    
    if not validate_data(data):
        logger.error("数据验证失败")
        raise ValidationError("数据格式不正确")
    
    # 主要逻辑
    return process(data)

# 服务层异常处理
try:
    result = service.process()
except ServiceException as e:
    logger.error(f"服务异常: {str(e)}", exc_info=True)
    raise HTTPException(status_code=500, detail=str(e))
```

### 3. 异步编程规范
```python
# 所有I/O操作使用异步
async def chat_stream(request: ChatRequest) -> AsyncGenerator[StreamEvent, None]:
    # 异步工具调用
    results = await mcp_service.call_tool(tool_name, arguments)
    
    # 异步流式处理
    async for event in provider.completions(...):
        yield event
```

### 4. 类型注解规范
```python
from typing import List, Dict, Optional, AsyncGenerator

# 完整的类型注解
async def process_chat(
    message: str,
    history: List[Dict[str, str]],
    tools: Optional[List[Tool]] = None
) -> AsyncGenerator[StreamEvent, None]:
    pass
```

### 5. 方法拆分规范
```python
# 超过50行的方法必须拆分
class ChatService:
    async def chat_stream(self, request: ChatRequest) -> AsyncGenerator[StreamEvent, None]:
        # 主流程控制
        knowledge_context = await self._handle_knowledge_query(request)
        web_context = await self._handle_web_search(request)
        tools = await self._handle_mcp_tools(request)
        
        async for event in self._execute_chat_loop(request, knowledge_context, web_context, tools):
            yield event
    
    async def _handle_knowledge_query(self, request: ChatRequest) -> Optional[str]:
        # 具体实现
        pass
    
    async def _handle_web_search(self, request: ChatRequest) -> Optional[str]:
        # 具体实现
        pass
```

### 6. 配置管理规范
```python
# 使用环境变量和配置类
from ..core.config import get_settings

settings = get_settings()

# 避免硬编码
MAX_TOKENS = settings.DEFAULT_MAX_TOKENS  # 而非 MAX_TOKENS = 1024
API_TIMEOUT = settings.API_TIMEOUT  # 而非 API_TIMEOUT = 30
```

### 7. 依赖注入规范
```python
# FastAPI依赖注入
from fastapi import Depends

async def chat_endpoint(
    request: ChatRequest,
    chat_service: ChatService = Depends(get_chat_service),
    current_user: User = Depends(get_current_user)
):
    pass

# 服务层依赖注入
class ChatService:
    def __init__(self, 
                 knowledge_service: KnowledgeService,
                 mcp_service: MCPService,
                 conversation_service: ConversationService):
        self.knowledge_service = knowledge_service
        self.mcp_service = mcp_service
        self.conversation_service = conversation_service
```

## API设计规范

### 1. RESTful API规范
```python
# 正确的RESTful设计
GET    /api/conversations           # 获取会话列表
POST   /api/conversations           # 创建会话
GET    /api/conversations/{id}      # 获取特定会话
PUT    /api/conversations/{id}      # 更新会话
DELETE /api/conversations/{id}      # 删除会话

# 避免的设计
POST   /api/get_conversations       # 错误：使用POST获取数据
POST   /api/conversation_create     # 错误：动词式命名
```

### 2. 响应格式规范
```python
# 统一的响应格式
class ApiResponse(BaseModel):
    code: int = 200
    message: str = "success"
    data: Any = None
    timestamp: datetime = Field(default_factory=datetime.now)

# 使用响应构建器
def api_response(data=None, message="success", code=200):
    return ApiResponse(code=code, message=message, data=data)
```

### 3. 流式API规范
```python
# 流式响应格式
class StreamEvent(BaseModel):
    type: str  # content, thinking, tool_call, tool_result, error
    data: Any

# 流式响应处理
async def stream_generator():
    async for event in service.process():
        yield f"data: {event.json()}\n\n"
```

## 数据库设计规范

### 1. 文件存储规范
```python
# 用户数据隔离
users_data/
├── {user_id}/
│   ├── llm_config.json
│   ├── mcp_servers.json
│   └── knowledge_bases/
└── conversations/
    └── {user_id}/
        └── {conversation_id}.json
```

### 2. 数据模型规范
```python
# 使用Pydantic模型
class User(BaseModel):
    id: str
    username: str
    email: str
    created_at: datetime
    updated_at: Optional[datetime] = None
    
    @classmethod
    def from_dict(cls, data: dict) -> "User":
        # 数据转换逻辑
        pass
    
    def to_dict(self) -> dict:
        # 序列化逻辑
        pass
```

## 安全规范

### 1. 认证授权
```python
# JWT令牌认证
async def get_current_user(token: str = Depends(oauth2_scheme)) -> User:
    # 令牌验证逻辑
    pass

# 可选认证（支持匿名用户）
async def get_optional_current_user(token: Optional[str] = None) -> Optional[User]:
    # 可选认证逻辑
    pass
```

### 2. 敏感信息处理
```python
# API密钥脱敏
def mask_api_key(api_key: str) -> str:
    if not api_key or len(api_key) < 8:
        return "****"
    return f"{api_key[:4]}****{api_key[-4:]}"

# 响应中移除敏感信息
config_dict.pop('api_key', None)
config_dict.pop('user_id', None)
```

## 性能优化规范

### 1. 异步优化
- 所有I/O操作使用异步
- 避免在异步函数中使用同步阻塞调用
- 使用连接池管理数据库连接

### 2. 内存优化
- 使用生成器处理大数据集
- 及时释放不需要的对象引用
- 避免在循环中创建大量临时对象

### 3. 缓存策略
- 用户配置缓存
- 知识库索引缓存
- LLM响应缓存（可选）

这些规范确保项目的可维护性、可扩展性和代码质量。所有新功能开发都应遵循这些规范。
